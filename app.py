import streamlit as st
import pandas as pd
import numpy as np
from gemini_ai import generate_ai_response
import joblib

st.set_page_config(
    page_title="Heartysis AI: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Å–µ—Ä–¥–µ—á–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", 
    page_icon="‚ô•", 
    layout="wide"
)

@st.cache_resource()
def load_model():
    with open('models/ensemble_model.joblib', 'rb') as file:
        model = joblib.load(file)
    print("Model loaded successfully!")
    return model

loaded_model = load_model()

def preprocess_input(age, sex, chest_pain_type, resting_bp, cholesterol, fasting_bs, resting_ecg, max_hr, exercise_angina, oldpeak, st_slope):
    def transform_Sex(sex):
        return 1 if sex == '–ú' else 0

    def transform_ChestPainType(cpt):
        if cpt == '–ê—Ç–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è': return 0
        elif cpt == '–ë–æ–ª—å, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å–æ —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏–µ–π': return 1
        elif cpt == '–ë–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω—ã–π': return 2
        else: return 3

    def transform_RestingECG(recg):
        if recg == '–ù–æ—Ä–º–∞': return 0
        elif recg == '–ê–Ω–æ–º–∞–ª–∏—è –∑—É–±—Ü–∞ ST-T': return 1
        else: return 2
        
    def transform_ExerciseAngina(ea):
        return 1 if ea == '–î–∞' else 0

    def transform_ST_Slope(sts):
        if sts == '–ü–ª–æ—Å–∫–∏–π': return 0
        elif sts == '–í–≤–µ—Ä—Ö': return 1
        else: return 2    
    
    sex = transform_Sex(sex)
    chest_pain_type = transform_ChestPainType(chest_pain_type)
    fasting_bs = 1 if fasting_bs == '> 120 –º–≥/–¥–ª' else 0
    resting_ecg = transform_RestingECG(resting_ecg)
    exercise_angina = transform_ExerciseAngina(exercise_angina)
    st_slope = transform_ST_Slope(st_slope)

    return np.array([[age, sex, chest_pain_type, resting_bp, cholesterol, fasting_bs, resting_ecg, max_hr, exercise_angina, oldpeak, st_slope]])

def predict_heart_disease_probability(input_data):
    try:
        probability = loaded_model.predict_proba(input_data)[:, 1]
    except Exception as e:
        st.error(f"An error occurred during prediction: {e}")
        return None
    return probability


st.title(":heart: Heartysis AI: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Å–µ—Ä–¥–µ—á–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è")
st.write("–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")

colA, colB = st.columns([2, 5])

with colA:
    st.markdown('''
        <img src="https://www.peninsulaheartclinic.co.uk/wp-content/uploads/2019/10/NEW_Heartbeat_looping_GIF_NORMAL_0.gif" width="350">
    ''', unsafe_allow_html=True)

with colB:
    st.markdown('''
        #### –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ—Ä–¥–µ—á–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?
        –°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–°–°–ó) ‚Äî —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤.

        #### –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–¥–µ–ª—å?
        –ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è.
    ''')

st.header("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ")
with st.container():
    age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=1, max_value=120)
    sex = st.radio("–ü–æ–ª", ["–ú", "–ñ"])
    chest_pain_type = st.selectbox("–¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏", ["–¢–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è", "–ê—Ç–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è", "–ë–æ–ª—å, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å–æ —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏–µ–π", "–ë–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω—ã–π"])
    resting_bp = st.number_input("–ö—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è (–º–º —Ä—Ç.—Å—Ç.)")
    cholesterol = st.number_input("–£—Ä–æ–≤–µ–Ω—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞ –≤ —Å—ã–≤–æ—Ä–æ—Ç–∫–µ –∫—Ä–æ–≤–∏ (–º–º/–¥–ª)")
    fasting_bs = st.radio("–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –Ω–∞—Ç–æ—â–∞–∫", ["> 120 –º–≥/–¥–ª", "<= 120 –º–≥/–¥–ª"])
    resting_ecg = st.selectbox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è", ["–í –Ω–æ—Ä–º–µ", "ST", "–ì–õ–ñ"])
    max_hr = st.number_input("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π")
    exercise_angina = st.radio("–°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è, –≤—ã–∑–≤–∞–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π", ["–î–∞", "–ù–µ—Ç"])
    oldpeak = st.number_input("–ü–∏–∫–æ–≤–æ-–ù–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (ST –¥–µ–ø—Ä–µ—Å—Å–∏—è)")
    st_slope = st.selectbox("ST Slope", ["–í–≤–µ—Ä—Ö", "–ü–ª–æ—Å–∫–∏–π", "–í–Ω–∏–∑"])

if st.button("–ê–Ω–∞–ª–∏–∑"):
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º.."):
        preprocessed_input = preprocess_input(age, sex, chest_pain_type, resting_bp, cholesterol, fasting_bs, resting_ecg, max_hr, exercise_angina, oldpeak, st_slope)
        heart_disease_probability = predict_heart_disease_probability(preprocessed_input)
        st.write("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π:", round(heart_disease_probability[0], 4))
        if heart_disease_probability[0] > 0.5:
            st.warning(":broken_heart: –£ –ø–∞—Ü–∏–µ–Ω—Ç–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –µ—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞.")
        else:
            st.success(":green_heart: –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è.")

st.write("---")

# Heartysis AI Chat Assistant
st.subheader("ü©∫ Heartysis AI Chat Assistant")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Gemini AI user response
if prompt := st.chat_input("–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"):
    with st.chat_message("user"):
        st.markdown(prompt)
    
    try:
        ai_answer = generate_ai_response(prompt)
    except Exception as e:
        ai_answer = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}'

    st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("assistant"):
        st.markdown(ai_answer)

    st.session_state.messages.append({"role": "assistant", "content": ai_answer})